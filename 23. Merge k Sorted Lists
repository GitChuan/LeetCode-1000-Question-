/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null) return list2;
        else if(list2 == null) return list1;
        if(list1.val >= list2.val){
            list2.next = mergeTwoLists(list1, list2.next);
            return list2;
        } else {
            list1.next = mergeTwoLists(list1.next, list2);
            return list1;
        }
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0) return null;
        return recursion(lists, 0, lists.length-1);
    }

    private ListNode recursion(ListNode[] listNodes, int i, int j){
        if(i == j) return listNodes[i];
        int m = i + (j-i) /2;
        ListNode left = recursion(listNodes, i, m);
        ListNode right = recursion(listNodes, m+1, j);
        return mergeTwoLists(left, right);
    }
}
