class Solution {
        public List<List<Integer>> permuteUnique(int[] nums) {
            Arrays.sort(nums);
            List<List<Integer>> result = new ArrayList<>();
            dfs(nums, new boolean[nums.length], new LinkedList<>(), result);
            return result;
        }

        private void dfs(int[] nums, boolean[] visited, LinkedList<Integer> stack, List<List<Integer>> result) {
            if (stack.size() == nums.length) {
                result.add(new ArrayList<>(stack));
                return;
            }

            for (int i = 0; i < nums.length; i++) {
                if(i > 0 && nums[i] == nums[i-1] && !visited[i-1]){
                    continue;
                }
                
                if (!visited[i]) {
                    stack.push(nums[i]);
                    visited[i] = true;
                    dfs(nums, visited, stack, result);
                    stack.pop();
                    visited[i] = false;
                }
            }
        }
    }
