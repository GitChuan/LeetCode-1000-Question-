/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        preInOrder(root, list);
        return list;
    }

    public static void preInOrder(TreeNode root, List<Integer> list) {
        if (root == null) return;
        TreeNode current = root;
        LinkedList<TreeNode> stack = new LinkedList<>();
        while (current != null || !stack.isEmpty()) {
            if (current != null) {
//                System.out.print("åŽ»" + current.val + " ");
                stack.push(current);
                current = current.left;
            } else {
                TreeNode pop = stack.pop();
                list.add(pop.val);
                current = pop.right;
            }
        }
    }
}
