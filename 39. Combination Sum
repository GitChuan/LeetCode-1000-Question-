class Solution {
        public List<List<Integer>> combinationSum(int[] candidates, int target) {
            List<List<Integer>> result = new ArrayList<>();
            dfs(0, candidates, target, new LinkedList<>(), result);
            return result;
        }

        private void dfs(int startIndex, int[] candidates, int target, LinkedList<Integer> stack, List<List<Integer>> result) {
            if(target == 0){
                result.add(new ArrayList<>(stack));
                return;
            }

            for (int i = startIndex; i < candidates.length; i++) {
                int candidate = candidates[i];
                if(target < candidate){
                    continue;
                }
                
                stack.push(candidate);
                dfs(i, candidates, target-candidate, stack, result);
                stack.pop();
            }

        }
    }
