class Solution {
        public static List<List<Integer>> combinationSum2(int[] candidates, int target) {
            List<List<Integer>> result = new ArrayList<>();
            Arrays.sort(candidates);
            dfs(0, candidates, new boolean[candidates.length], target, new LinkedList<>(), result);
            return result;
        }

        private static void dfs(int startIndex, int[] candidates, boolean[] visited, int target, LinkedList<Integer> stack, List<List<Integer>> result) {
            if (target == 0) {
                result.add(new ArrayList<>(stack));
                return;
            }

            for (int i = startIndex; i < candidates.length; i++) {
                int curr = candidates[i];
                if(target < curr){
                    break;
                }
                if(i > 0 && candidates[i-1] == curr && !visited[i-1]){
                    continue;
                }
                stack.push(curr);
                visited[i] = true;
                dfs(i+1, candidates, visited, target-curr, stack, result);
                stack.pop();
                visited[i] = false;
            }
        }
    }
