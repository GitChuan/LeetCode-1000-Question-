class MinHeap01 {
    private final int[] array;
    public int size;

    public MinHeap01(int capacity) {
        array = new int[capacity];
    }


    public void heapify() {
        for (int i = size / 2 - 1; i >= 0; i--) {
            down(i);
        }
    }

    private void down(int parent) {
        int left = parent * 2 + 1;
        int right = left + 1;
        int min = parent;
        if (left < size && array[left] < array[min]) {
            min = left;
        }
        if (right < size && array[right] < array[min]) {
            min = right;
        }
        if (min != parent) {
            exchange(min, parent);
            down(min);
        }
    }

    private void exchange(int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    public boolean offer(int value) {
        if (size == array.length) return false;
        up(value);
        size++;
        return true;
    }

    public int poll(){
        if(size == array.length) return -1;
        int polled = array[0];
        exchange(0, --size);
        down(0);
        return polled;
    }

    private void up(int added) {
        int child = size;
        while (child > 0) {
            int parent = (child - 1) / 2;
            if (array[parent] > added) {
                array[child] = array[parent];
            } else {
                break;
            }
            child = parent;

        }
        array[child] = added;
    }

    public int peek() {
        if (size == 0) return -1;
        return array[0];
    }

    public void replace(int replaced) {
        array[0] = replaced;
        down(0);
    }

    public boolean isFull() {
        return size == array.length;
    }

    public boolean isEmpty() {
        return size == 0;
    }

}

class MaxHeap01 {
    private final int[] array;
    public int size;

    public MaxHeap01(int capacity) {
        array = new int[capacity];
    }

    public int getSize() {
        return size;
    }

    public void heapify() {
        for (int i = size / 2 - 1; i >= 0; i--) {
            down(i);
        }
    }

    private void exchange(int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    /**
     * parent always have at least one son(left)
     *
     * @param parent
     */
    public void down(int parent) {
        int left = parent * 2 + 1;
        int right = left + 1;
        int max = parent;
        if (left < size && array[left] > array[max]) {
            max = left;
        }
        if (right < size && array[right] > array[max]) {
            max = right;
        }
        if (max != parent) {
            exchange(max, parent);
            down(max);
        }
    }

    public boolean offer(int value) {
        if (isFull()) return false;
        up(value);
        size++;
        return true;
    }

    private void up(int added) {
        int child = size;
        while (child > 0) {
            int parent = (child - 1) / 2;
            if (array[parent] < added) {
                array[child] = array[parent];
            } else {
                break;
            }
            child = parent;

        }
        array[child] = added;
    }

    public int peek() {
        if (isEmpty()) return -1;
        return array[0];
    }

    public int poll() {
        if (isEmpty()) return -1;
        int e = array[0];
        exchange(0, --size);
        down(0);
        return e;
    }

    public int poll(int index) {
        if (isEmpty()) return -1;
        int e = array[index];
        exchange(index, --size);
        down(index);
        return e;
    }

    public void replace(int replaced) {
        array[0] = replaced;
        down(0);
    }

    public boolean isFull() {
        return size == array.length;
    }

    public boolean isEmpty() {
        return size == 0;
    }

}

class MedianFinder {
    MinHeap01 minHeap = new MinHeap01(25001);
    MaxHeap01 maxHeap = new MaxHeap01(25001);

    public MedianFinder() {
    }

    public void addNum(int num) {
        if(minHeap.size == maxHeap.size){
            minHeap.offer(num);
            maxHeap.offer(minHeap.poll());
        } else {
            maxHeap.offer(num);
            minHeap.offer(maxHeap.poll());
        }

    }

    public double findMedian() {
        if(minHeap.size == maxHeap.size){
            return (minHeap.peek() + maxHeap.peek()) / 2.0;
        } else {
            return maxHeap.peek();
        }
    }
}
